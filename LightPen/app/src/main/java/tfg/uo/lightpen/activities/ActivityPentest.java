package tfg.uo.lightpen.activities;

import android.content.Intent;
import android.graphics.drawable.ColorDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;

import java.io.File;
import java.net.HttpRetryException;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentHashMap;

import tfg.uo.lightpen.R;
import tfg.uo.lightpen.activities.customElements.activityPentest.CustomPluginArrayAdapter;
import tfg.uo.lightpen.activities.customElements.activityPentest.PluginRow;
import tfg.uo.lightpen.business.impl.pluginSystem.impl.Plugin;
import tfg.uo.lightpen.infrastructure.factories.Factories;
import tfg.uo.lightpen.model.ContextData;

import android.widget.ProgressBar;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import tfg.uo.lightpen.business.impl.pluginSystem.impl.plugins.errors.Error;


public class ActivityPentest extends BasicActivity {

    private ContextData ctxD;
    private URL url;
    private int pluginsFinished = 0;
    private int pluginsStarted = 0;

    //Ejecucion de analisis
    private ConcurrentHashMap<Plugin, ArrayList<Error>>
            testResult = new ConcurrentHashMap<>();

    final ArrayList<PluginRow> pluginRows = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pentest);

        WebView wb = (WebView) findViewById(R.id.pentestLoading);
        wb.setWebViewClient(new WebViewClient());
        wb.loadUrl("file:///android_asset/loading.gif");

        ctxD = new ContextData();
        ctxD.setContext(getApplicationContext());
        ctxD.setProgressBar((ProgressBar) findViewById(R.id.pentestProgressBar));


        //Realizamos la carga de los plugins
        ArrayList<Plugin> pluginsReady = Factories
                .business
                .createPluginFactory()
                .createPluginLoader(getContextData())
                .pluginLoad();


        //Introducimos los plugins cargados en los objetos envoltorio
        for (Plugin p : pluginsReady) {
            p.setContextData(getContextData());
            pluginRows.add(new PluginRow(p));

        }

        //Obtenemos el objeto listview
        ListView lv = (ListView) findViewById(R.id.activityPentest_listPlugin);

        lv.setAdapter(new CustomPluginArrayAdapter(this, pluginRows));

        lv.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                Toast.makeText(ActivityPentest.this,
                        pluginRows.get(position).getPlugin().showName(), Toast.LENGTH_SHORT)
                        .show();
            }
        });

        final EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
        dir.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if(b)
                    dir.setBackgroundColor(getColorId(R.color.pentest_urlNew));
            }
        });
        dir.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
                if(view.getId()==R.id.pentestEditText_dir) {
                    dir.setText("");
                    dir.setBackgroundColor(getColorId(R.color.pentest_urlNew));
                }
            }
        });

        ProgressBar pentestProg = (ProgressBar) findViewById(R.id.pentestProgressBar);
        pentestProg.setProgress(0);

    }

    public void startOperation(View view){

        ArrayList<Plugin> plugins2Work = new ArrayList<>();
        EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
        validateAddress(view);
        ColorDrawable status = (ColorDrawable) dir.getBackground();
        for(PluginRow r : pluginRows){
            if(r.getChecked() == true)
                plugins2Work.add(r.getPlugin());
        }

        if(plugins2Work.size() > 0
                && status.getColor() == getColorId(R.color.pentest_urlOK)){
            LinearLayout pluginsLinear = (LinearLayout) findViewById(R.id.pentestLinearInicioAnalisis);
            LinearLayout progresLinear = (LinearLayout) findViewById(R.id.pentestLinearLayoutInProgress);

            pluginsLinear.setVisibility(View.INVISIBLE);
            progresLinear.setVisibility(View.VISIBLE);



            //core.startAnalysis(plugins2Work, "dir", progress);
            int maxProgress = 100 / plugins2Work.size();
            setPluginsStarted(plugins2Work.size());
            for(Plugin p : plugins2Work){
                AsyncPluginRunner runner = new AsyncPluginRunner();
                runner.setMaxProgress(maxProgress);
                runner.setDir(getURL());
                runner.setContextData(getContextData());
                runner.execute(p);

            }

        }else
            showMessage(getBaseContext(),
                    getResources().getString(R.string.pentestToast_ZeroPlugins_err)
                    , Gravity.BOTTOM,getMsgTime());
    }

    public void updateProgress(int progress){
        ProgressBar pentestProg = (ProgressBar) findViewById(R.id.pentestProgressBar);
        synchronized (pentestProg) {
            pentestProg.setProgress(progress+pentestProg.getProgress());
            pluginsFinished++;
            if(getPluginsFinished() == getPluginsStarted()){//Se ha terminado el analisis
                File f = Factories
                        .business
                        .createHtmlBuilderFactory()
                        .createHtmlBuilder(ctxD, testResult)
                        .processOutput(url.getHost());//Comienza la escritura de errores

                Intent intent  = new Intent(this, ActivityPentestView.class);
                intent.putExtra("pentest", f );
                intent.putExtra("nav", "pentest");

                startActivity(intent); //comienza cambio de activity
                finish();
            }
        }
    }

    public void back(View view){finish();}

    @Override
    public void onBackPressed() {
        if(findViewById(R.id.pentestLinearInicioAnalisis).getVisibility() == View.VISIBLE)
            super.onBackPressed();
    }

    //region Validacion de conexion asincrona
    public void validateAddress(View view){
        EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
        if(!dir.getText().toString().equals("")) {
            hideKeyboard(this);
            AsyncAddressValidation validationTask = new AsyncAddressValidation();
            validationTask.execute(validURL(dir.getText().toString()));
        }else
            showMessage(getBaseContext(),
                    getResources().getString(R.string.pentestToast_ZeroAddress_err),
                    Gravity.BOTTOM,getMsgTime());
    }

    public void addressValidationStatus(boolean cond, String err) {
        EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);

        if (cond) {
                dir.setBackgroundColor(getColorId(R.color.pentest_urlOK));
                url = validURL(dir.getText().toString());
        } else {
            showMessage(getBaseContext(),
                    err
                    , Gravity.BOTTOM,getMsgTime());
                dir.setBackgroundColor(getColorId(R.color.pentest_urlError));
        }
    }


    public void TextFieldClicked(View view){
        EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
        if(view.getId()==R.id.pentestEditText_dir) {
            dir.setText("");
            dir.setBackgroundColor(getColorId(R.color.pentest_urlNew));
        }
    }



    public class AsyncAddressValidation extends AsyncTask<URL, Void, String>{
        private static final String TAG = "AsyncAddressValidation";
        HttpURLConnection con;
        EditText dir;
        String err = "";
        int timeout;
        @Override
        protected String doInBackground(URL... url) {

            try{
                con = (HttpURLConnection) url[0]
                        .openConnection();
                con.setConnectTimeout(timeout);
                con.setReadTimeout(timeout);
                con.connect();
                if (con.getResponseCode() == 200) //codigo correcto
                    err =  "200";
                else
                    throw new HttpRetryException("ResponseCodeException",con.getResponseCode());
            }catch (SocketTimeoutException e){
                Log.e(TAG, "Validation doInBackgroudn: ", e);
                err = getString(R.string.pentestToast_Address_err_timeout);
            }catch (UnknownHostException e){
                Log.e(TAG, "Validation doInBackgroudn: ", e);
                    err = getString(R.string.pentestToast_Address_err_host);
            }catch (Exception e) {
                Log.e(TAG, "Validation doInBackgroudn: ", e);
                err = getString(R.string.pentestToast_Address_err);
            }
            finally {
                if(con != null)
                    con.disconnect();
            }
            return err;

        }

        @Override
        protected void onPreExecute(){
            EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
            dir.setEnabled(false);

            Button validateButton = (Button) findViewById(R.id.pentestButton_validateAddress);
            validateButton.setClickable(false);

            Button startButton = (Button) findViewById(R.id.pentestButton_Start);
            startButton.setClickable(false);

            dir = (EditText) findViewById(R.id.pentestEditText_dir);
            ProgressBar validation =
                    (ProgressBar) findViewById(R.id.pentestValidateProgress);
            validation.setVisibility(View.VISIBLE);
            timeout = Integer.parseInt(Factories
                    .business
                    .createConfigReaderFactory()
                    .createConfigReader()
                    .run(getApplicationContext(), "validateURL_timeout"));
        }

        @Override
        protected void onPostExecute(String status){
            Log.d(TAG, "onPostExecute: Finalizada prueba de conexion");
            ProgressBar validation =
                    (ProgressBar) findViewById(R.id.pentestValidateProgress);
            validation.setVisibility(View.INVISIBLE);
            Button validateButton = (Button) findViewById(R.id.pentestButton_validateAddress);
            Button startButton = (Button) findViewById(R.id.pentestButton_Start);
            EditText dir = (EditText) findViewById(R.id.pentestEditText_dir);
            dir.setEnabled(true);
            validateButton.setClickable(true);
            startButton.setClickable(true);
            if(status.equals("200"))
                addressValidationStatus(true, status);
            else
                addressValidationStatus(false, status);

        }


    }
    //endregion
    //region Ejecucion asincrona de plugins
    class AsyncPluginRunner
            extends AsyncTask<Plugin, Integer, ArrayList<Error>> {

        public final static String TAG = "AsyncPluginRunner";

        //region atributos
        /**
         * Contexto de la aplicación
         */
        private ContextData ctxD;
        /**
         * direccion de analisis
         */
        private URL dir;
        /**
         * maximo progreso adquirible por un plugin
         */
        private int maxProgress;
        /**
         * plugin a ejecutar
         */
        private Plugin plugin;
        //endregion

        @Override
        protected ArrayList<Error> doInBackground(Plugin... plugins) {
            Log.d(TAG, "doInBackground: Comienza la ejecucion del plugin: "
                    +plugins[0].showName());
            setPlugin(plugins[0]);
            getPlugin().setContextData(ctxD);
            return getPlugin().run(dir);
        }



        @Override
        protected void onPostExecute(ArrayList<Error> result) {
            testResult.put(getPlugin(), result);
            updateProgress(getMaxProgress());
        }


        @Override
        protected void onPreExecute() {
            setMaxProgress(maxProgress);
        }


        //region Setter & Getter
        public void setDir(URL d){

            this.dir = d;
        }
        public URL getDir(){

            return dir;
        }
        public void setMaxProgress(int p){

            this.maxProgress = p;
        }
        public int getMaxProgress(){

            return maxProgress;
        }
        public void setPlugin(Plugin plugin){
            this.plugin = plugin;
        }
        public Plugin getPlugin(){
            return plugin;
        }
        public void setContextData(ContextData ctxD){
            this.ctxD = ctxD;
        }
        public ContextData getContextData(){
            return ctxD;
        }

        //endregion
    }
    //endregion
    //region Setters & Getters
    private void setContextData(ContextData ctxD){
        this.ctxD = ctxD;
    }
    private ContextData getContextData(){
        return ctxD;
    }
    private void setUrl(URL url){
        this.url = url;
    }
    private URL getURL(){
        return url;
    }

    public int getPluginsFinished() {
        return pluginsFinished;
    }

    public void setPluginsFinished(int pluginsFinished) {
        this.pluginsFinished = pluginsFinished;
    }

    public int getPluginsStarted() {
        return pluginsStarted;
    }

    public void setPluginsStarted(int plugins2Work) {
        this.pluginsStarted = plugins2Work;
    }
    //endregion
}
