package tfg.uo.lightpen.activities;

import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.view.MenuItemCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.ShareActionProvider;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.io.File;

import tfg.uo.lightpen.R;

public class ActivityPentestView extends BasicActivity {

    private File htmlPentest;
    private String navigation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pentest_view);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        setHtmlPentest((File) getIntent().getExtras().getSerializable("pentest"));

        setNavigation(getIntent().getExtras().getString("nav"));

        loadResult(htmlPentest);
    }


    private void pentestStyle(MenuItem back, MenuItem delete){
        back.setTitle(R.string.pentestViewMenuBackNSave);
        delete.setVisible(false);
    }

    private void historyStyle(MenuItem back, MenuItem delete){

        back.setTitle(R.string.pentestViewMenuBack);
        delete.setVisible(true);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if(htmlPentest != null) {
            MenuInflater inflater = getMenuInflater();
            inflater.inflate(R.menu.menu_activity_pentest_view, menu);

            addMenuShare(menu);

            addMenuDelete(menu);

            addMenuBack(menu);

        }

        return true;
    }

    private void addMenuBack(Menu menu) {
        MenuItem backItem = menu.findItem(R.id.menu_item_back);
        backItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                showExitDialog();
                return true;
            }
        });
    }

    private void addMenuDelete(Menu menu) {
        MenuItem deleteItem = menu.findItem(R.id.menu_item_delete);
        MenuItem backItem = menu.findItem(R.id.menu_item_back);
        if(getNavigation().equals("pentest"))
                pentestStyle(backItem, deleteItem);
        else
                historyStyle(backItem, deleteItem);


        deleteItem.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                showDeleteDialog();
                return true;
            }
        });
    }

    private void addMenuShare(Menu menu) {
        MenuItem shareItem = menu.findItem(R.id.menu_item_share);
        ShareActionProvider myShareActionProvider =
                (ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);

        Intent htmlIntent = new Intent(Intent.ACTION_SEND);

        htmlIntent.setType("text/html");
        htmlIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(htmlPentest));
        htmlIntent.putExtra(Intent.EXTRA_SUBJECT, "pentest");
        htmlIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        myShareActionProvider.setShareIntent(htmlIntent);
    }

    @Override
    public void onBackPressed() {
        showExitDialog();
    }


    /**
     * Carga un elemento en el webView
     * @param file fichero a mostrar
     */
    private void loadResult(File file){

        setHtmlPentest(file);

        WebView wb = (WebView) findViewById(R.id.PentestViewWebView);
        wb.setWebChromeClient(new WebChromeClient());
        wb.setWebViewClient(new WebViewClient());
        wb.getSettings().setJavaScriptEnabled(true);
        wb.loadUrl("file:///" + getHtmlPentest());
    }

    private void showExitDialog() {
        if(navigation.equals("pentest")) {
            AlertDialog.Builder builder = new AlertDialog.Builder(ActivityPentestView.this);
            builder.setTitle(getString(R.string.pentestViewCloseDialogTitle));
            builder.setMessage(getString(R.string.pentestViewCloseDialogMsg));

            String positiveText = getString(R.string.default_Si);
            builder.setPositiveButton(positiveText,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent actividad = new Intent(getApplicationContext(), ActivityHistory.class);
                            startActivity(actividad);
                            finish();
                        }
                    });

            String negativeText = getString(R.string.default_No);
            builder.setNegativeButton(negativeText,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            htmlPentest.delete();
                            Intent actividad = new Intent(getApplicationContext(), ActivityHistory.class);
                            startActivity(actividad);
                            finish();
                        }
                    });

            AlertDialog dialog = builder.create();

            dialog.show();
        }else{
            Intent actividad = new Intent(getApplicationContext(), ActivityHistory.class);
            startActivity(actividad);
            finish();
        }
    }

    private void showDeleteDialog() {
        if(navigation.equals("history")) {
            AlertDialog.Builder builder = new AlertDialog.Builder(ActivityPentestView.this);
            builder.setTitle(getString(R.string.pentestViewDeleteDialogTitle));
            builder.setMessage(getString(R.string.pentestViewDeleteDialogMsg));

            String positiveText = getString(android.R.string.yes);//R.string.general_yes);
            builder.setPositiveButton(positiveText,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            htmlPentest.delete();
                            Intent actividad = new Intent(getApplicationContext(), ActivityHistory.class);
                            startActivity(actividad);
                            finish();
                        }
                    });

            String negativeText = getString(android.R.string.no);//R.string.general_no);
            builder.setNegativeButton(negativeText,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                        }
                    });

            AlertDialog dialog = builder.create();

            dialog.show();
        }
    }

    //region Setters & Getters
    private void setHtmlPentest(File file){
        this.htmlPentest = file;
    }
    private File getHtmlPentest(){
        return htmlPentest;
    }
    private void setNavigation(String nav){
        this.navigation = nav;
    }
    private String getNavigation(){
        return navigation;
    }

    //endregion
}
